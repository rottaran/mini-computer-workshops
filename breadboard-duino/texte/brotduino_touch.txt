====== Brotduino Touch ======

{{ :projekte:digiwerkstatt:img_4340.jpg?direct&310|}}
{{ :projekte:digiwerkstatt:img_4341.jpg?direct&310|}}
{{ :projekte:digiwerkstatt:img_4342.jpg?direct&310|}}
{{ :projekte:digiwerkstatt:img_4343.jpg?direct&310|}}
{{ :projekte:digiwerkstatt:img_4344.jpg?direct&310|}}

Super einfache berührungsempfindliche Taster. 

basiert auf [[brotduino base]] und http://playground.arduino.cc/Code/CapacitiveSensor

===== Materialbedarf =====

  * Drähte und Metallgegenstände die berührt werden sollen. Einzige Einschränkung ist, dass man die Drähte irgendwie mit dem Metall verbinden muss, zum Beispiel durch schrauben oder löten.

===== Programmierung =====


Aufbau: 4 LEDs und 4 kapazitive Taster\\
Durch Berühren eines Tasters soll die jeweilige LED eingeschaltet werden.

=== Variante 1 ===

<code c++>
void setup() {
  pinMode(9,  OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
}

void loop() {
  if(readCapacitivePin(5) > 5) {
    digitalWrite(9, HIGH);
  } else {
    digitalWrite(9, LOW);
  }
  
  if(readCapacitivePin(6) > 5) {
    digitalWrite(10, HIGH);
  } else {
    digitalWrite(10, LOW);
  }
  
  if(readCapacitivePin(7) > 5) {
    digitalWrite(11, HIGH);
  } else {
    digitalWrite(11, LOW);
  }
  
  if(readCapacitivePin(8) > 5) {
    digitalWrite(12, HIGH);
  } else {
    digitalWrite(12, LOW);
  }
  
  delay(10);
}



// readCapacitivePin
//  Input: Arduino pin number
//  Output: A number, from 0 to 17 expressing
//  how much capacitance is on the pin
//  When you touch the pin, or whatever you have
//  attached to it, the number will get higher
#include "pins_arduino.h" // Arduino pre-1.0 needs this
uint8_t readCapacitivePin(int pinToMeasure) {
  // Variables used to translate from Arduino to AVR pin naming
  volatile uint8_t* port;
  volatile uint8_t* ddr;
  volatile uint8_t* pin;
  // Here we translate the input pin number from
  //  Arduino pin number to the AVR PORT, PIN, DDR,
  //  and which bit of those registers we care about.
  byte bitmask;
  port = portOutputRegister(digitalPinToPort(pinToMeasure));
  ddr = portModeRegister(digitalPinToPort(pinToMeasure));
  bitmask = digitalPinToBitMask(pinToMeasure);
  pin = portInputRegister(digitalPinToPort(pinToMeasure));
  // Discharge the pin first by setting it low and output
  *port &= ~(bitmask);
  *ddr  |= bitmask;
  delay(1);
  // Prevent the timer IRQ from disturbing our measurement
  noInterrupts();
  // Make the pin an input with the internal pull-up on
  *ddr &= ~(bitmask);
  *port |= bitmask;

  // Now see how long the pin to get pulled up. This manual unrolling of the loop
  // decreases the number of hardware cycles between each read of the pin,
  // thus increasing sensitivity.
  uint8_t cycles = 17;
       if (*pin & bitmask) { cycles =  0;}
  else if (*pin & bitmask) { cycles =  1;}
  else if (*pin & bitmask) { cycles =  2;}
  else if (*pin & bitmask) { cycles =  3;}
  else if (*pin & bitmask) { cycles =  4;}
  else if (*pin & bitmask) { cycles =  5;}
  else if (*pin & bitmask) { cycles =  6;}
  else if (*pin & bitmask) { cycles =  7;}
  else if (*pin & bitmask) { cycles =  8;}
  else if (*pin & bitmask) { cycles =  9;}
  else if (*pin & bitmask) { cycles = 10;}
  else if (*pin & bitmask) { cycles = 11;}
  else if (*pin & bitmask) { cycles = 12;}
  else if (*pin & bitmask) { cycles = 13;}
  else if (*pin & bitmask) { cycles = 14;}
  else if (*pin & bitmask) { cycles = 15;}
  else if (*pin & bitmask) { cycles = 16;}

  // End of timing-critical section
  interrupts();

  // Discharge the pin again by setting it low and output
  //  It's important to leave the pins low if you want to 
  //  be able to touch more than 1 sensor at a time - if
  //  the sensor is left pulled high, when you touch
  //  two sensors, your body will transfer the charge between
  //  sensors.
  *port &= ~(bitmask);
  *ddr  |= bitmask;

  return cycles;
}

</code>

=== Variante 2 ===

<code c++>
void setup() {
  pinMode(9,  OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
}

void loop() {
  
  digitalWrite(9,  (readCapacitivePin(5) > 5) ? HIGH : LOW);
  digitalWrite(10, (readCapacitivePin(6) > 5) ? HIGH : LOW);
  digitalWrite(11, (readCapacitivePin(7) > 5) ? HIGH : LOW);
  digitalWrite(12, (readCapacitivePin(8) > 5) ? HIGH : LOW);
  
  delay(10);
}
</code>

=== Variante 3 ===
<code c++>
int leds[] = {9,10,11,12};
int taster[] = {5,6,7,8};
int numLEDs = sizeof(leds) / sizeof(int);

void setup() {
  for(int i=0; i<numLEDs; ++i) 
    pinMode(leds[i], OUTPUT);
}

void loop() {
  for(int i=0; i<numLEDs; ++i) {
    if(readCapacitivePin(taster[i]) > 5) {
      digitalWrite(leds[i], HIGH);
    } else {
      digitalWrite(leds[i], LOW);
    }
  }
  delay(10);
}
</code>




===== Weiterführende Literatur =====

  * http://playground.arduino.cc/Code/CapacitiveSensor
  * http://pcbheaven.com/wikipages/How_a_Touch_Button_works/ http://www.youtube.com/watch?v=0GmIkyEzHnk
  * http://jethomson.wordpress.com/2011/05/27/smb-warp-pipe-toilet-touch-sensor/
  * http://www.pcbheaven.com/circuitpages/Resistance_Touch_Button/
  * http://www.instructables.com/id/Turn-a-pencil-drawing-into-a-capacitive-sensor-for/all/?lang=de
  * [[http://www.cs.nott.ac.uk/~jqm/?p=605|Joe Marshall's OctoSynth]] 8-Kanal Polyphon mit 8 Touch-Tasten. Siehe auch http://www.instructables.com/id/The-Arduino-OctoSynth/ Die Funktion für die Auswertung der Touch-Tasten ist geschickt programmiert, so dass die 8 Tasten gleichzeitig anstatt nacheinander gelesen werden. Das spart viel Zeit, was für Audio-Generierung notwendig ist!
